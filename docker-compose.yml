version: '3'

x-airflow-common:
  &airflow-common
  build: .
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow

    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__SCHEDULER__MIN_FILE_PROCESS_INTERVAL: 10
    AIRFLOW__WEBSERVER__SECRET_KEY: my-consistent-secret-key-123
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./mlruns:/mlruns
    - ./clearml.conf:/opt/airflow/clearml.conf
    - .dvc:/app/.dvc
    - .dvc/config.local:/app/.dvc/config.local 
  networks:
    - airflow-net
  depends_on:
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
      - .dvc:/app/.dvc
      - .dvc/config.local:/app/.dvc/config.local 
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always
    networks:
      - airflow-net

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 8081:8080
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    networks:
      - airflow-net
    volumes:
      - .:/app
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - .dvc:/app/.dvc
      - .dvc/config.local:/app/.dvc/config.local 
      - ./mlruns:/app/mlruns
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/app
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - .dvc:/app/.dvc
      - .dvc/config.local:/app/.dvc/config.local 
      - ./mlruns:/app/mlruns
    restart: always

  airflow-init:
    <<: *airflow-common
    command: version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    volumes:
      - .:/app
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - .dvc:/app/.dvc  
      - ./mlruns:/app/mlruns
    networks:
      - airflow-net  

  mlflow:
    image: bitnami/mlflow:2.22.0-debian-12-r3
    container_name: mlflow
    ports:
      - "5001:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql+psycopg2://airflow:airflow@postgres/mlflow
      - MLFLOW_ARTIFACT_ROOT=/app/mlruns
    command: >
      mlflow server
      --backend-store-uri postgresql+psycopg2://airflow:airflow@postgres/mlflow
      --default-artifact-root /app/mlruns
      --host 0.0.0.0
    volumes:
      - ./mlruns:/app/mlruns
    depends_on:
      - postgres
    networks:
      - airflow-net
    entrypoint: ""


    

  airflow-worker: 
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - postgres
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      #- AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow

    volumes:
      - .:/app
      - ./mlruns:/app/mlruns
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - .dvc/config.local:/app/.dvc/config.local
    command: worker
    networks:
      - airflow-net

  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - .dvc:/app/.dvc
      - .dvc/config.local:/app/.dvc/config.local

networks:
  airflow-net:

volumes:
  postgres-db-volume:
  mlruns: